#!/bin/bash
version="0.4"

# # # #
#
# Large portion of this are not being used, since I only have one multi-monitor use case.
# I also don't care about the laptop lid being closed, so the config_closed_lid function is not used.
#
# # # #

usage ()
{
	echo \
'Usage: display-visor [-f] [-i] [-l [switch]]

	-f, --feh	Run feh bg script.
                         Executes ~/.fehbg upon completion.
	-i, --i3	Test for i3wm instance.
                         For avoiding conflict with multiple environments.
	-l, --lid	Check laptop lid status.
                         Ignored/Assumed closed if not given.
                         It is possible to specify switch. Defaults to 'LID0'
                         If unsure, look under /proc/acpi/button/lid/...
	-v, --version	Print version info.

 Useful for setting monitor layouts on system login/resume/hotplug
 when using window managers that do not handle display settings.

 Depends on xorg-xrandr.

This is free software.
2015, Michael Heyns <https://github.com/beanaroo>
'
}

handle_args ()
{
	while [ "$1" != "" ]; do
		case $1 in
			-h | --help )		usage
								exit
								;;
			-f | --feh )		fehbg=true
								;;
			-i | --i3 )			i3test=true
								;;
			-l | --lid )    	lidtest=true
                                lidswitch=${2:-LID0}
                                lidstatus=$(cat /proc/acpi/button/lid/$lidswitch/state 2>/dev/null | awk '{print $NF}')
                                shift
								;;
			-v | --version )	echo "display-visor $version"
								exit
								;;
			* )				usage
								exit 1
								;;
		esac
		shift
	done
}


## Error Handling
handle_err ()
{
    # Test for running Xorg server
    if [ -z "$(ps -C Xorg --no-headers)" ]; then
        echo "$prefix No Xorg server found. Exiting..."
        exit 1
    fi

    # Test for running instance of i3
    if [ "$i3test" == "true" -a -z "$(ps -C i3 --no-headers)" ]; then
        echo "$prefix i3wm not running. Exiting..."
        exit 1
    fi

    # Test for valid laptop lid status.
    if [ "$lidtest" == "true" -a -z "$lidstatus" ]; then
        echo "$prefix Laptop lid switch $lidswitch not found. Exiting..."
        exit 1
    fi
}

## Declare Output Devices
declare_outputs ()
{
    devices=$(find /sys/class/drm/*/status)
    while read l ; do
        dir=$(dirname $l)
        status=$(cat $l)
        dev=$(echo $dir | cut -d\- -f 2-)

        if [ $(expr match  $dev "HDMI") != "0" ]; then
            dev=HDMI${dev#HDMI-?-}
        else
            dev=$(echo $dev | tr -d '-')
        fi

        if [ "connected" == "$status" ]; then
            echo "$prefix $dev connected"
            declare -gA $dev="yes"
        fi
    done <<< "$devices"
}

## Configure monitors for closed lid
config_closed_lid ()
{
    if [ "$lidstatus" == "closed" ]; then
        echo "$prefix Laptop lid is closed"
    elif [ -n "$LVDS1" -a -z "$lidtest" ]; then
        echo "$prefix Laptop display will be ignored unless -l option is set"
    fi
    if [ -n "$HDMI1" -a -n "$VGA1" ]; then
        echo "$prefix SETTING: HDMI1 (Primary) - VGA1 (Right)"
        xrandr --output LVDS1 --off \
               --output HDMI1 --auto --primary \
               --output VGA1 --auto --right-of HDMI1
    elif [ -n "$HDMI1" -a -z "$VGA1" ]; then
        echo "$prefix SETTING: HDMI1 (Primary)"
        xrandr --output LVDS1 --off \
               --output VGA1 --off \
               --output HDMI1 --auto --primary
    elif [ -z "$HDMI1" -a -n "$VGA1" ]; then
        echo "$prefix SETTING: VGA1 (Primary)"
        xrandr --output LVDS1 --off \
               --output HDMI1 --off \
               --output VGA1 --auto --primary
    else
        echo "$prefix No external monitors are plugged in"
        xrandr --output HDMI1 --off \
               --output VGA1 --off \
               --output LVDS1 --auto --primary
    fi
}

## Configure monitors for open lid
config_open_lid ()
{
    echo "$prefix Laptop lid is open"
    if [ -n "$DVII1" ]; then
        echo "$prefix SETTING: DVI-I-2-2 (Left) - HDMI1 (Primary) - DVI-I-1-1 (Right)"
        xrandr --output eDP-1 --mode 1920x1080 --pos 1080x1080 \
          --output DVI-I-3-2 --mode 1920x1080 --pos 0x0 \
          --output DVI-I-2-1 --mode 1920x1080 --pos 1920x0
    elif [ -n "$HDMI1" -a -z "$VGA1" ]; then
        echo "$prefix HDMI1 is plugged in, but not VGA1"
        echo "$prefix SETTING: LVDS1 (Primary) - HDMI1 (Right)"
        xrandr --output VGA1 --off \
               --output LVDS1 --auto --primary \
               --output HDMI1 --auto --right-of LVDS1 --noprimary
    elif [ -z "$HDMI1" -a -n "$VGA1" ]; then
        echo "$prefix SETTING: LVDS1 (Primary) - VGA1 (Right)"
        xrandr --output HDMI1 --off \
               --output LVDS1 --auto --primary \
               --output VGA1 --auto --right-of LVDS1 --noprimary
    else
        echo "$prefix No external monitors are plugged in"
        xrandr --output HDMI1 --off \
               --output VGA1 --off \
               --output LVDS1 --auto --primary
    fi
}

configure_displays ()
{

    handle_err

    declare_outputs

    # if [ -z "$lidstatus" -o "$lidstatus" == "closed" ]; then
    #     echo "Lid Closed"
    #     config_closed_lid
    # elif [ "$lidstatus" == "open" ]; then
        echo "Lid Open"
        config_open_lid
    # fi

    # Run .fehbg script if -f argument is given.
    if [ "$fehbg" == "true" ]; then
        if [ -x $HOME/.fehbg ]; then
            echo "$prefix Setting background using .fehbg."
            $($HOME/.fehbg 2>/dev/null)
        else
            echo ".$prefix Failed to execute ~/.fehbg script. Use 'feh --bg-xxx' to generate one."
        fi
    fi

	# FIXME: Prevent segfault occurring from simultanious signals. -- Issue #5 --
	sleep 2

}

#-----------#
#   Begin   #
#-----------#

# Set exit signal trap.
trap "echo 'Received interrupt. Exiting...' ; exit" SIGHUP SIGINT SIGQUIT

# Log output.
#prefix='[ display-visor: ]:'
exec 1> >(logger -s -t "display-visor") 2>&1

# Handle arguments.
handle_args "$@"

# Configure displays upon initialization.
configure_displays

# Set reconfigure trap.
trap "echo 'Received signal. Reconfiguring displays.' ; configure_displays" RTMIN+5

# Wait for signals
while :
do
    sleep 60 &
    wait
done
